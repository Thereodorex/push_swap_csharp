Запуск на macos:
dotnet run --project PushSwap profile=debug numbers.txt commands.txt

Задача проекта:
В описании задания используется слово "стек", хотя корректнее было бы использовать термин "двусторонняя очередь".
Дан несортированный стек А с неповторяющимися числами, и пустой стек В.
Есть список команд:
pa - перемещает верхний элемент из А на верх B
pb - перемещает верхний элемент из B на верх A
sa - меняет места два верхних элемента в стеке А
sb - меняет места два верхних элемента в стеке В
ra - помещает элемент с верха А в низ А
rb - помещает элемент с верха В в низ В
rr - ra и rb как одна команда
rra - помещает эелемент с низа А на верх А
rrb - помещает эелемент с низа В на верх В
rrr - rra и rrb как одна команда.
Задание - используя только данный список команд найти как можно меньшую последовательность команд,
в результате которой все элементы окажутся в стеке А и стек А станет сортированным по возрастанию.

Программа читает из файла числа, добавляет в стек А, далее зависит от режима работы.
В программе представлено три режима работы:
debug - даёт возможность пользователю вводить команды и смотреть на результат после каждой команды ("42" - завершить ввод)
checker - получает список команд из файла и проверяет приводит ли выполнение команд к нужному результату
push_swap - берёт числа из файла и выводит найденный список команд в файл
Затем программа выводит результат (успешно или нет) и количество команд.

В решении используются три класса:
StackProcessor - реализует операции над стеками (читает из файла, выполняет команды, запоминает команды, печатает результат).
PushSwap - реализует алгоритм поиска последовательности команд.
Program - основной класс программы, выполняет нужный режим в зависимости от аргументов командной строки.

Использована упрощённая версия алгоритма, состоящая из следующих шагов:
1) Перемещаем все элементы, кроме двух последних, в стек В
2) Далее всегда соблюдаем такую последовательность в стеке А, чтобы числа в нём всегда были в возрастающем порядке.
При этом начало может плавать, то есть следующий элемент всегда больше предыдущего, кроме случая когда это
максимальный и минимальный элементы текущего стека А.
3) Находим наименьшую комбинацию из вращений такую, чтобы можно было выполнить команду pa, соблюдая пункт 2.
Для этого проходим по всем элементам и среди подходящих чисел считаем дистанцию либо от начала, либо от конца, также
учитывая что есть команды rr и rrr, то есть при вращении в одну сторону короткая дистанция не учитвается.
Данная реализация является схематичной, так как много простора как для уменьшения количества команд в результате,
так и для увелечения скорости работы программы.